import TelegramBot, { type  InlineKeyboardMarkup } from 'node-telegram-bot-api';
import pc from "picocolors";
import { Logger } from '../Modules/Logger';
import { Stats } from '../Database/Stats';
import { Scheduler } from '../Modules/Scheduler';
import { config } from '../Config/config';

const ADMIN_CHAT_ID = config.telegram.adminChatId;
const bot = new TelegramBot(config.telegram.token, { polling: true });


const isAdmin = (chatId: string): boolean => chatId === ADMIN_CHAT_ID;

/**
 * –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
 */
const mainMenu: InlineKeyboardMarkup = {
  inline_keyboard: [
    [
      { text: "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data: "view_stats" },
      { text: "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å", callback_data: "reload_module" },
    ],
    [
      { text: "üìÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞", callback_data: "scheduler_status" },
      { text: "–ü–æ–º–æ—â—å", callback_data: "help" },
    ],
  ],
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
 * @param chatId ID —á–∞—Ç–∞.
 */
const showMainMenu = async (chatId: string): Promise<void> => {
  try {
    await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", {
      reply_markup: mainMenu,
    });
  } catch (error) {
    Logger.error(
      `${pc.red("[Telegram ERROR]")} || –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é: ${(error as Error).message}`
    );
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.
 */
bot.on("callback_query", async (query) => {
  const chatId = query.message?.chat.id.toString() || "";
  const action = query.data;

  if (!isAdmin(chatId)) {
    await bot.answerCallbackQuery(query.id, {
      text: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º.",
    });
    return;
  }

  switch (action) {
    case "view_stats":
      try {
        const statistics = await Stats.getStatistics(); // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await bot.sendMessage(chatId, statistics, {parse_mode: "Markdown"});
      } catch (error) {
        await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${(error as Error).message}`);
      }
      break;

    case "reload_module":
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
        await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:");
        bot.once("message", async (msg) => {
          const moduleName = msg.text;
          if (moduleName) {
            try {
              const reloaded = await reloadModule(moduleName);
              await bot.sendMessage(chatId, `‚úÖ –ú–æ–¥—É–ª—å ${reloaded} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.`);
            } catch (error) {
              await bot.sendMessage(chatId,`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è: ${(error as Error).message}`);
            }
          } else {
            await bot.sendMessage(chatId, "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è.");
          }
        });
      } catch (error) {
        await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: ${(error as Error).message}`);
      }
      break;

    case "scheduler_status":
      try {
        const status = Scheduler.listTasks();
        await bot.sendMessage(chatId, `üìÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:\n${status}`);
      } catch (error) {
        await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: ${(error as Error).message}`);
      }
      break;

    case "help":
      await bot.sendMessage(
        chatId,
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å:\n" +
          "- üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n" +
          "- üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å: —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.\n" +
          "- üìÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á."
      );
      break;

    default:
      await bot.answerCallbackQuery(query.id, { text: "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ." });
  }

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
  await bot.answerCallbackQuery(query.id);
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é.
 */
bot.on("message", async (msg) => {
  const chatId = msg.chat.id.toString();

  if (!isAdmin(chatId)) {
    await bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º.");
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –ª—é–±–æ–º –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞
  await showMainMenu(chatId);
});

/**
 * –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è.
 * @param moduleName –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.
 * @returns –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è.
 */
const reloadModule = async (moduleName: string): Promise<string> => {
  delete require.cache[require.resolve(`./${moduleName}`)];
  const module = await import(`./${moduleName}`);
  return module;
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
export const initializeTelegramBot = (): void => {
  Logger.info(`${pc.green("[Telegram]")} || Telegram –±–æ—Ç —Å –º–µ–Ω—é –∑–∞–ø—É—â–µ–Ω.`);
};